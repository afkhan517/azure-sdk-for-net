// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Storage
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BlobContainersOperations.
    /// </summary>
    public static partial class BlobContainersOperationsExtensions
    {
            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static ListContainerItems List(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                return operations.ListAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ListContainerItems> ListAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='containerMeatadata'>
            /// TODO
            /// </param>
            /// <param name='publicAccess'>
            /// TODO. Possible values include: 'container', 'blob'
            /// </param>
            public static void Create(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IDictionary<string, string> containerMeatadata, PublicAccess publicAccess)
            {
                operations.CreateAsync(resourceGroupName, accountName, containerName, containerMeatadata, publicAccess).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='containerMeatadata'>
            /// TODO
            /// </param>
            /// <param name='publicAccess'>
            /// TODO. Possible values include: 'container', 'blob'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IDictionary<string, string> containerMeatadata, PublicAccess publicAccess, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, containerName, containerMeatadata, publicAccess, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='containerMeatadata'>
            /// TODO
            /// </param>
            /// <param name='publicAccess'>
            /// TODO. Possible values include: 'container', 'blob'
            /// </param>
            public static void Update(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IDictionary<string, string> containerMeatadata = default(IDictionary<string, string>), PublicAccess? publicAccess = default(PublicAccess?))
            {
                operations.UpdateAsync(resourceGroupName, accountName, containerName, containerMeatadata, publicAccess).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='containerMeatadata'>
            /// TODO
            /// </param>
            /// <param name='publicAccess'>
            /// TODO. Possible values include: 'container', 'blob'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IDictionary<string, string> containerMeatadata = default(IDictionary<string, string>), PublicAccess? publicAccess = default(PublicAccess?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, containerName, containerMeatadata, publicAccess, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static BlobContainerProperties Get(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                return operations.GetAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BlobContainerProperties> GetAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static void Delete(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static void Lease(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                operations.LeaseAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LeaseAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.LeaseWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='tags'>
            /// TODO
            /// </param>
            public static LegalHold SetLegalHold(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IList<string> tags)
            {
                return operations.SetLegalHoldAsync(resourceGroupName, accountName, containerName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='tags'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LegalHold> SetLegalHoldAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IList<string> tags, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetLegalHoldWithHttpMessagesAsync(resourceGroupName, accountName, containerName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='tags'>
            /// TODO
            /// </param>
            public static LegalHold ClearLegalHold(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IList<string> tags)
            {
                return operations.ClearLegalHoldAsync(resourceGroupName, accountName, containerName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='tags'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LegalHold> ClearLegalHoldAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, IList<string> tags, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ClearLegalHoldWithHttpMessagesAsync(resourceGroupName, accountName, containerName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='parameters'>
            /// TODO
            /// </param>
            public static ImmutabilityPolicy CreateImmutabilityPolicies(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, ImmutabilityPolicy parameters = default(ImmutabilityPolicy))
            {
                return operations.CreateImmutabilityPoliciesAsync(resourceGroupName, accountName, containerName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='parameters'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> CreateImmutabilityPoliciesAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, ImmutabilityPolicy parameters = default(ImmutabilityPolicy), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateImmutabilityPoliciesWithHttpMessagesAsync(resourceGroupName, accountName, containerName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static ImmutabilityPolicy GetImmutabilityPolicies(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                return operations.GetImmutabilityPoliciesAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> GetImmutabilityPoliciesAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetImmutabilityPoliciesWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static void DeleteImmutabilityPolicies(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                operations.DeleteImmutabilityPoliciesAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteImmutabilityPoliciesAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteImmutabilityPoliciesWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            public static ImmutabilityPolicy LockImmutabilityPolicies(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName)
            {
                return operations.LockImmutabilityPoliciesAsync(resourceGroupName, accountName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> LockImmutabilityPoliciesAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.LockImmutabilityPoliciesWithHttpMessagesAsync(resourceGroupName, accountName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='parameters'>
            /// TODO
            /// </param>
            public static ImmutabilityPolicy ExtendImmutabilityPolicies(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, ImmutabilityPolicy parameters = default(ImmutabilityPolicy))
            {
                return operations.ExtendImmutabilityPoliciesAsync(resourceGroupName, accountName, containerName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// TODO
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription. The name is
            /// case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='containerName'>
            /// The name of the blob container within the specified storage account. Blob
            /// container names must be between 3 and 63 characters in length and use
            /// numbers, lower-case letters and dash (-) only. Every dash (-) character
            /// must be immediately preceded and followed by a letter or number.
            /// </param>
            /// <param name='parameters'>
            /// TODO
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ImmutabilityPolicy> ExtendImmutabilityPoliciesAsync(this IBlobContainersOperations operations, string resourceGroupName, string accountName, string containerName, ImmutabilityPolicy parameters = default(ImmutabilityPolicy), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExtendImmutabilityPoliciesWithHttpMessagesAsync(resourceGroupName, accountName, containerName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
